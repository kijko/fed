/*
 * This file is generated by jOOQ.
 */
package pl.edu.prz.baw.houston.fed.db.tables.records;


import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import pl.edu.prz.baw.houston.fed.db.tables.Account;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record3<String, String, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.account.account_number</code>.
     */
    public void setAccountNumber(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.account.account_number</code>.
     */
    public String getAccountNumber() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.account.owner_id</code>.
     */
    public void setOwnerId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.account.owner_id</code>.
     */
    public String getOwnerId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.account.balance</code>.
     */
    public void setBalance(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.account.balance</code>.
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, BigDecimal> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Account.ACCOUNT.ACCOUNT_NUMBER;
    }

    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.OWNER_ID;
    }

    @Override
    public Field<BigDecimal> field3() {
        return Account.ACCOUNT.BALANCE;
    }

    @Override
    public String component1() {
        return getAccountNumber();
    }

    @Override
    public String component2() {
        return getOwnerId();
    }

    @Override
    public BigDecimal component3() {
        return getBalance();
    }

    @Override
    public String value1() {
        return getAccountNumber();
    }

    @Override
    public String value2() {
        return getOwnerId();
    }

    @Override
    public BigDecimal value3() {
        return getBalance();
    }

    @Override
    public AccountRecord value1(String value) {
        setAccountNumber(value);
        return this;
    }

    @Override
    public AccountRecord value2(String value) {
        setOwnerId(value);
        return this;
    }

    @Override
    public AccountRecord value3(BigDecimal value) {
        setBalance(value);
        return this;
    }

    @Override
    public AccountRecord values(String value1, String value2, BigDecimal value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(String accountNumber, String ownerId, BigDecimal balance) {
        super(Account.ACCOUNT);

        setAccountNumber(accountNumber);
        setOwnerId(ownerId);
        setBalance(balance);
        resetChangedOnNotNull();
    }
}
