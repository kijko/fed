/*
 * This file is generated by jOOQ.
 */
package pl.edu.prz.baw.houston.fed.db.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.edu.prz.baw.houston.fed.db.Keys;
import pl.edu.prz.baw.houston.fed.db.Public;
import pl.edu.prz.baw.houston.fed.db.tables.records.TransferRequestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransferRequest extends TableImpl<TransferRequestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transfer_request</code>
     */
    public static final TransferRequest TRANSFER_REQUEST = new TransferRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferRequestRecord> getRecordType() {
        return TransferRequestRecord.class;
    }

    /**
     * The column <code>public.transfer_request.id</code>.
     */
    public final TableField<TransferRequestRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.transfer_request.from_account</code>.
     */
    public final TableField<TransferRequestRecord, String> FROM_ACCOUNT = createField(DSL.name("from_account"), SQLDataType.VARCHAR(28).nullable(false), this, "");

    /**
     * The column <code>public.transfer_request.to_account</code>.
     */
    public final TableField<TransferRequestRecord, String> TO_ACCOUNT = createField(DSL.name("to_account"), SQLDataType.VARCHAR(28).nullable(false), this, "");

    /**
     * The column <code>public.transfer_request.status</code>.
     */
    public final TableField<TransferRequestRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.transfer_request.finalized_by</code>.
     */
    public final TableField<TransferRequestRecord, String> FINALIZED_BY = createField(DSL.name("finalized_by"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>public.transfer_request.amount</code>.
     */
    public final TableField<TransferRequestRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(19, 4).nullable(false), this, "");

    /**
     * The column <code>public.transfer_request.requested_at</code>.
     */
    public final TableField<TransferRequestRecord, LocalDateTime> REQUESTED_AT = createField(DSL.name("requested_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private TransferRequest(Name alias, Table<TransferRequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransferRequest(Name alias, Table<TransferRequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transfer_request</code> table reference
     */
    public TransferRequest(String alias) {
        this(DSL.name(alias), TRANSFER_REQUEST);
    }

    /**
     * Create an aliased <code>public.transfer_request</code> table reference
     */
    public TransferRequest(Name alias) {
        this(alias, TRANSFER_REQUEST);
    }

    /**
     * Create a <code>public.transfer_request</code> table reference
     */
    public TransferRequest() {
        this(DSL.name("transfer_request"), null);
    }

    public <O extends Record> TransferRequest(Table<O> child, ForeignKey<O, TransferRequestRecord> key) {
        super(child, key, TRANSFER_REQUEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TransferRequestRecord> getPrimaryKey() {
        return Keys.TRANSFER_REQUEST_PKEY;
    }

    @Override
    public List<ForeignKey<TransferRequestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSFER_REQUEST__FK_FROM_ACCOUNT, Keys.TRANSFER_REQUEST__FK_TO_ACCOUNT, Keys.TRANSFER_REQUEST__FK_FINALIZED_BY);
    }

    private transient Account _fkFromAccount;
    private transient Account _fkToAccount;
    private transient FedUser _fedUser;

    /**
     * Get the implicit join path to the <code>public.account</code> table, via
     * the <code>fk_from_account</code> key.
     */
    public Account fkFromAccount() {
        if (_fkFromAccount == null)
            _fkFromAccount = new Account(this, Keys.TRANSFER_REQUEST__FK_FROM_ACCOUNT);

        return _fkFromAccount;
    }

    /**
     * Get the implicit join path to the <code>public.account</code> table, via
     * the <code>fk_to_account</code> key.
     */
    public Account fkToAccount() {
        if (_fkToAccount == null)
            _fkToAccount = new Account(this, Keys.TRANSFER_REQUEST__FK_TO_ACCOUNT);

        return _fkToAccount;
    }

    /**
     * Get the implicit join path to the <code>public.fed_user</code> table.
     */
    public FedUser fedUser() {
        if (_fedUser == null)
            _fedUser = new FedUser(this, Keys.TRANSFER_REQUEST__FK_FINALIZED_BY);

        return _fedUser;
    }

    @Override
    public TransferRequest as(String alias) {
        return new TransferRequest(DSL.name(alias), this);
    }

    @Override
    public TransferRequest as(Name alias) {
        return new TransferRequest(alias, this);
    }

    @Override
    public TransferRequest as(Table<?> alias) {
        return new TransferRequest(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferRequest rename(String name) {
        return new TransferRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferRequest rename(Name name) {
        return new TransferRequest(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferRequest rename(Table<?> name) {
        return new TransferRequest(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, BigDecimal, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super String, ? super String, ? super String, ? super BigDecimal, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super String, ? super String, ? super String, ? super BigDecimal, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
